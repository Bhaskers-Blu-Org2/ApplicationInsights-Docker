plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}

apply plugin: 'java'

def localDockerDir = "$rootDir/build/docker"

version = '0.9'

repositories {
    mavenCentral()
    maven {
        url 'http://dotm2.azurewebsites.net/repository/'
    }
}

dependencies {
    compile group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '1.0.2-SNAPSHOT+'
    compile group: 'com.google.code.gson', name: 'gson', version: '1.7.2'

    testCompile 'junit:junit:4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.0'
}

// region Prepare Docker build folder

task copyPythonScripts(type: Copy) {
    from "$rootDir/python"
    into "$localDockerDir/python"
    exclude "**/__pycache__", "**/.idea"
}

task copyDockerFiles(type: Copy) {
    from "$rootDir/docker"
    into localDockerDir
}

task copyApplicationLibs(type: Copy) {
    from project.buildDir.absolutePath + "/libs"

    // TODO: remove when the Java SDK bug will be fixed (config file parsing failed when provided as resource)
    from "$rootDir/sdk"

    into localDockerDir
}

// Installing python required libraries.
task installPythonLibraties << {
    File theInfoFile = new File("$rootDir/docker/requirements.txt")
    theInfoFile.eachLine { line ->
        exec {
            executable "python"
            args "-m", "pip", "install", line
        }
    }
}

task runPythonTests << {
    exec {
        executable "python"
        args "-m", "unittest", "discover", "-s", "$rootDir/python"
    }
}

tasks.test.dependsOn installPythonLibraties
tasks.runPythonTests.dependsOn installPythonLibraties
tasks.test.finalizedBy runPythonTests

// Creating a fat-jar instead of the original one, to be added to the image more easily.

// TODO: create a specific task to prepare docker folder.
jar.enabled = false
tasks.shadowJar.finalizedBy copyPythonScripts, copyDockerFiles, copyApplicationLibs

shadowJar {
    classifier = ''
}

// endregion Prepare Docker build folder

// region Remote deploy

task remoteDeployment {
    dependsOn clean

    def remoteSettings = System.getenv("DOCKER_REMOTE_SETTINGS_FILE_PATH")

    if (remoteSettings) {
        Properties props = new Properties()
        props.load(new FileInputStream(remoteSettings))

        project.ext.machineName = props.get("machineName")
        project.ext.userName = props.get("userName")
        project.ext.pass = props.get("pass")
        project.ext.ikey = props.get("ikey")
    } else {
        ext.requriedProperties = ["machineName", "userName", "pass"]
    }

    group = 'verification'
    description = 'Builds and starts Application Insights container on remote machine.'

    // TODO: check plink, pscp installations first.

    // TODO: Change after creating specific task for creating the docker folder.
    dependsOn shadowJar

    def imageName = "ai-develop-remote";
    def containerName = imageName
    def remoteDockerDir = "/remote/docker"

    doLast {
        logger.info("Deploying image to $userName@$machineName.")

        try
        {
            runRemoteCommand("Cleaning exiting remote Docker resources.", "rm -rf $remoteDockerDir")
            runRemoteCommand("Creating remote Docker folder.", "mkdir $remoteDockerDir")
            runRemoteCopy("Copying local Docker folder to remote machine.", "$localDockerDir/*", "$userName@$machineName:$remoteDockerDir")
            runRemoteCommand("Building Docker image on remote machine.", "cd $remoteDockerDir; docker build -t $imageName .")
            runRemoteCommand("Killing existing container, if exists.", "docker kill $containerName && docker rm $containerName || true")
            runRemoteCommand("Starting Docker image.", "docker run -v /var/run/docker.sock:/docker.sock --name $containerName -d $imageName ikey=$ikey")
        }
        finally
        {
            // TODO: anything to finalize?
        }
    }
}

def runRemoteCopy(description, from, into) {
    logger.info("[runRemoteCopy] $description")
    exec {
        executable "pscp.exe"
        args "-r", "-pw", pass, "\"$from\"", "\"$into\""
    }
}

def runRemoteCommand(description, command) {
    logger.info("[runRemoteCommand] $description")
    exec {
        executable "plink.exe"
        args "-pw", pass, "$userName@$machineName", "\"$command\""
    }
}

// endregion Remote deploy