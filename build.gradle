plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}

apply plugin: 'java'
apply from: "$rootDir/gradle/remote.gradle"

def localDockerDir = "$rootDir/build/docker"

version = '0.9'

repositories {
    mavenCentral()
    maven {
        url 'http://dotm2.azurewebsites.net/repository/'
    }
}

dependencies {
    compile group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '1.0.2-SNAPSHOT+'
    compile group: 'com.google.code.gson', name: 'gson', version: '1.7.2'

    testCompile 'junit:junit:4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.0'
}

// region Prepare Docker build folder

task copyPythonScripts(type: Copy) {
    from "$rootDir/python"
    into "$localDockerDir/python"
    exclude "**/__pycache__", "**/.idea"
}

task copyDockerFiles(type: Copy) {
    from "$rootDir/docker"
    into localDockerDir
}

task copyApplicationLibs(type: Copy) {
    from project.buildDir.absolutePath + "/libs"

    // TODO: remove when the Java SDK bug will be fixed (config file parsing failed when provided as resource)
    from "$rootDir/sdk"

    into localDockerDir
}

// Installing python required libraries.
task installPythonLibraties << {
    File theInfoFile = new File("$rootDir/docker/requirements.txt")
    theInfoFile.eachLine { line ->
        exec {
            executable "python"
            args "-m", "pip", "install", line
        }
    }
}

task runPythonTests << {
    exec {
        executable "python"
        args "-m", "unittest", "discover", "-s", "$rootDir/python"
    }
}

tasks.test.dependsOn installPythonLibraties
tasks.runPythonTests.dependsOn installPythonLibraties
tasks.test.finalizedBy runPythonTests

// Creating a fat-jar instead of the original one, to be added to the image more easily.

// TODO: create a specific task to prepare docker folder.
jar.enabled = false
tasks.shadowJar.finalizedBy copyPythonScripts, copyDockerFiles, copyApplicationLibs

shadowJar {
    classifier = ''
}

// endregion Prepare Docker build folder